{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["type With3dOptions = {\r\n  axe?: \"x\" | \"y\";\r\n  inverted?: boolean | \"x\" | \"y\";\r\n  maxAngle?: number;\r\n  perspective?: number;\r\n};\r\n\r\ntype Options = {\r\n  elementRadius?: number;\r\n  detectionRadius?: number | \"full\";\r\n  animation?: {\r\n    ease?: string;\r\n    duration?: number;\r\n  };\r\n  scale?: {\r\n    from?: number;\r\n    to?: number;\r\n    animated?: boolean;\r\n  };\r\n  inverted?: boolean | \"x\" | \"y\";\r\n  axe?: \"x\" | \"y\";\r\n  with_3d?: boolean | With3dOptions;\r\n};\r\n\r\n//all the instance of Cattract class\r\nconst instances: Cattract[] = [];\r\n\r\nconst defaultOptions: Options = {\r\n  elementRadius: 20,\r\n  detectionRadius: 50,\r\n  animation: {\r\n    ease: \"ease-in-out\",\r\n    duration: 1000,\r\n  },\r\n};\r\n\r\nconst default3dOptions: With3dOptions = {\r\n  maxAngle: 35,\r\n  perspective: 500,\r\n};\r\n\r\nclass Cattract {\r\n  /**\r\n   * Create a circle attraction animation on an element\r\n   * @param target The element you want to be animated\r\n   * @param options The differents options\r\n   */\r\n  constructor(public target: HTMLElement, public options: Options = {}) {\r\n    this.options = Object.assign({}, defaultOptions, options);\r\n    this.options.animation = Object.assign(\r\n      {},\r\n      defaultOptions.animation,\r\n      options.animation ?? {}\r\n    );\r\n    if (this.options.with_3d) {\r\n      this.options.with_3d = Object.assign(\r\n        {},\r\n        default3dOptions,\r\n        this.options.with_3d === true ? {} : this.options.with_3d\r\n      );\r\n    }\r\n    this.target.style.transformOrigin = \"center\";\r\n    this.start();\r\n  }\r\n\r\n  /**\r\n   * Apply translation on the target with animation\r\n   * @param translation\r\n   */\r\n  private applyTranslation(translation: string) {\r\n    this.target.animate([{ transform: translation }], {\r\n      duration: this.options.animation.duration,\r\n      fill: \"forwards\",\r\n      easing: this.options.animation.ease,\r\n    });\r\n    // this.target.style.transform = translation;\r\n  }\r\n\r\n  /**\r\n   * Return the screen radius\r\n   * @returns\r\n   */\r\n  private getScreenRadius() {\r\n    return Math.max(window.innerWidth, window.innerHeight) / 2;\r\n  }\r\n\r\n  /**\r\n   * Get delta for a specified invertion\r\n   * @param invertion\r\n   * @returns\r\n   */\r\n  private getDeltaFromInvertion(invertion: boolean | \"x\" | \"y\") {\r\n    const delta = { x: 1, y: 1 };\r\n    if (invertion === true) {\r\n      delta.x = delta.y = -1;\r\n    } else if (invertion === \"x\") {\r\n      delta.x = -1;\r\n    } else if (invertion === \"y\") {\r\n      delta.y = -1;\r\n    }\r\n    return delta;\r\n  }\r\n\r\n  /**\r\n   * Create a circle for the debug\r\n   * @param radius\r\n   * @returns\r\n   */\r\n  private createCircle(radius: number, color: string) {\r\n    const circle = document.createElement(\"div\");\r\n    circle.setAttribute(\r\n      \"style\",\r\n      `\r\n      position: absolute;\r\n      background-color: transparent;\r\n      width: ${radius * 2}px;\r\n      aspect-ratio: 1/1;\r\n      border: thin ${color} solid;\r\n      border-radius: 100%;\r\n    `\r\n        .replace(/\\n+/g, \"\")\r\n        .replace(/\\s+/g, \" \")\r\n    );\r\n    return circle;\r\n  }\r\n\r\n  /**\r\n   * Display circle for detection zone and the element circle for better debugging\r\n   * @param color\r\n   */\r\n  debug(color: string = \"#e1e1e130\") {\r\n    this.target.parentElement.style.position = \"relative\";\r\n\r\n    const append = (element: HTMLDivElement) => {\r\n      this.target.parentNode.insertBefore(element, this.target);\r\n    };\r\n\r\n    const elementRadiusCircle = this.createCircle(\r\n      this.options.elementRadius,\r\n      color\r\n    );\r\n    append(elementRadiusCircle);\r\n\r\n    if (this.options.detectionRadius !== \"full\") {\r\n      const detectionRadiusCircle = this.createCircle(\r\n        this.options.detectionRadius,\r\n        color\r\n      );\r\n      append(detectionRadiusCircle);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the actual needed transformation properties of the element\r\n   * @returns\r\n   */\r\n  private getTransformation() {\r\n    const computedStyles = window.getComputedStyle(this.target);\r\n    const transformValue = computedStyles.transform;\r\n    let translationX = 0;\r\n    let translationY = 0;\r\n    let scaleX = 1;\r\n    let scaleY = 1;\r\n\r\n    if (transformValue && transformValue !== \"none\") {\r\n      const matrixRegex = /(matrix3d|matrix)\\(([^)]+)\\)/;\r\n      const match = transformValue.match(matrixRegex);\r\n\r\n      if (match) {\r\n        const matrixValues = match[2].split(\",\").map(parseFloat);\r\n\r\n        if (match[1] === \"matrix\") {\r\n          // 2D transformation matrix\r\n          scaleX = matrixValues[0];\r\n          scaleY = matrixValues[3];\r\n          translationX = matrixValues[4];\r\n          translationY = matrixValues[5];\r\n        } else if (match[1] === \"matrix3d\") {\r\n          // 3D transformation matrix\r\n          scaleX = matrixValues[0];\r\n          scaleY = matrixValues[5];\r\n          translationX = matrixValues[12];\r\n          translationY = matrixValues[13];\r\n          // const translationZ = matrixValues[14];\r\n          // const scaleZ = matrixValues[10];\r\n        }\r\n      }\r\n    }\r\n\r\n    return { translationX, translationY, scaleX, scaleY };\r\n  }\r\n\r\n  /**\r\n   * Update the position of the targer\r\n   * @param x The x position of the cursor\r\n   * @param y The y position of the cursor\r\n   */\r\n  update(x: number, y: number) {\r\n    //TODO: Fixe this shit (fuckng lagging)\r\n    const rect = this.target.getBoundingClientRect();\r\n    const trans = this.getTransformation();\r\n    const width = rect.width / trans.scaleX;\r\n    const height = rect.height / trans.scaleY;\r\n    const targetMiddleX = rect.left - trans.translationX + width / 2;\r\n    const targetMiddleY = rect.top - trans.translationY + height / 2;\r\n\r\n    const [dx, dy] = [x - targetMiddleX, y - targetMiddleY];\r\n    const mouseRadius = Math.sqrt(dx * dx + dy * dy);\r\n\r\n    if (\r\n      this.options.detectionRadius === \"full\" ||\r\n      mouseRadius <= this.options.detectionRadius\r\n    ) {\r\n      const transformations: string[] = [];\r\n\r\n      const hypp = Math.sqrt(dx * dx + dy * dy);\r\n      const tx = hypp === 0 ? 0 : dx / hypp;\r\n      const ty = hypp === 0 ? 0 : dy / hypp;\r\n      const totalRadius =\r\n        this.options.detectionRadius === \"full\"\r\n          ? this.getScreenRadius()\r\n          : this.options.detectionRadius;\r\n      const pourcentage = hypp / totalRadius;\r\n      const computedRadius = this.options.elementRadius * pourcentage;\r\n\r\n      /* Handle 3D effect */\r\n      if (this.options.with_3d) {\r\n        const options3d = this.options.with_3d as With3dOptions;\r\n        const delta = this.getDeltaFromInvertion(options3d.inverted);\r\n        const computedAngle = options3d.maxAngle * pourcentage;\r\n        transformations.push(`perspective(${options3d.perspective}px)`);\r\n        if (!options3d.axe || options3d.axe === \"x\")\r\n          transformations.push(`rotateX(${ty * computedAngle * delta.x}deg)`);\r\n        if (!options3d.axe || options3d.axe === \"y\")\r\n          transformations.push(`rotateY(${-tx * computedAngle * delta.y}deg)`);\r\n      }\r\n\r\n      /* Handle scale */\r\n      if (this.options.scale?.to) {\r\n        const scaleOptions = this.options.scale;\r\n        const scaleFrom = scaleOptions.from ?? 1;\r\n        let finalScale = scaleOptions.to - scaleFrom;\r\n        if (scaleOptions.animated) finalScale *= pourcentage;\r\n        transformations.push(`scale(${scaleFrom + finalScale})`);\r\n      }\r\n\r\n      /* Handle translation */\r\n      const delta = this.getDeltaFromInvertion(this.options.inverted);\r\n      const [transX, transY] = [\r\n        tx * computedRadius * delta.x,\r\n        ty * computedRadius * delta.y,\r\n      ];\r\n      if (!this.options.axe || this.options.axe === \"x\")\r\n        transformations.push(`translateX(${transX}px)`);\r\n\r\n      if (!this.options.axe || this.options.axe === \"y\")\r\n        transformations.push(`translateY(${transY}px)`);\r\n\r\n      this.applyTranslation(transformations.join(\" \"));\r\n    } else {\r\n      if (this.options.scale?.from)\r\n        this.applyTranslation(`scale(${this.options.scale.from})`);\r\n      else this.applyTranslation(\"none\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Start attraction animation\r\n   */\r\n  start() {\r\n    this.target.style.willChange = \"transform\";\r\n    if (this.options.with_3d) this.target.style.transformStyle = \"preserve-3d\";\r\n    if (this.options.scale?.from)\r\n      this.target.style.transform = `scale(${this.options.scale.from})`;\r\n    instances.push(this);\r\n  }\r\n\r\n  /**\r\n   * Stop the attraction animation\r\n   */\r\n  stop() {\r\n    const index = instances.findIndex(\r\n      (instance) => instance.target === this.target\r\n    );\r\n    if (index !== -1) instances.splice(index, 1);\r\n  }\r\n\r\n  /**\r\n   * Reset the element tranformation\r\n   */\r\n  reset() {\r\n    this.target.style.transform = \"none\";\r\n  }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n  document.body.addEventListener(\"mousemove\", function (event) {\r\n    const [x, y] = [event.clientX, event.clientY];\r\n    for (const instance of instances) {\r\n      if (!instance.target.isConnected) {\r\n        instance.stop();\r\n        continue;\r\n      }\r\n      instance.update(x, y);\r\n    }\r\n  });\r\n});\r\n\r\nexport default Cattract;\r\n"],"names":["instances","defaultOptions","elementRadius","detectionRadius","animation","ease","duration","default3dOptions","maxAngle","perspective","document","addEventListener","body","event","x","y","clientX","clientY","instance","target","isConnected","update","stop","constructor","options","this","Object","assign","_a","with_3d","style","transformOrigin","start","applyTranslation","translation","animate","transform","fill","easing","getScreenRadius","Math","max","window","innerWidth","innerHeight","getDeltaFromInvertion","invertion","delta","createCircle","radius","color","circle","createElement","setAttribute","replace","debug","parentElement","position","append","element","parentNode","insertBefore","getTransformation","transformValue","getComputedStyle","translationX","translationY","scaleX","scaleY","matrixRegex","match","matrixValues","split","map","parseFloat","rect","getBoundingClientRect","trans","width","height","targetMiddleX","left","targetMiddleY","top","dx","dy","mouseRadius","sqrt","transformations","hypp","tx","ty","pourcentage","computedRadius","options3d","inverted","computedAngle","push","axe","scale","to","scaleOptions","scaleFrom","_b","from","finalScale","animated","transX","transY","join","willChange","transformStyle","index","findIndex","splice","reset"],"mappings":"yOAyBA,MAAMA,EAAwB,GAExBC,EAA0B,CAC9BC,cAAe,GACfC,gBAAiB,GACjBC,UAAW,CACTC,KAAM,cACNC,SAAU,MAIRC,EAAkC,CACtCC,SAAU,GACVC,YAAa,YAiQfC,SAASC,iBAAiB,oBAAoB,WAC5CD,SAASE,KAAKD,iBAAiB,aAAa,SAAUE,GACpD,MAAOC,EAAGC,GAAK,CAACF,EAAMG,QAASH,EAAMI,SACrC,IAAK,MAAMC,KAAYlB,EAChBkB,EAASC,OAAOC,YAIrBF,EAASG,OAAOP,EAAGC,GAHjBG,EAASI,MAKf,GACF,IAzQA,MAME,WAAAC,CAAmBJ,EAA4BK,EAAmB,UAA/CC,KAAMN,OAANA,EAA4BM,KAAOD,QAAPA,EAC7CC,KAAKD,QAAUE,OAAOC,OAAO,CAAA,EAAI1B,EAAgBuB,GACjDC,KAAKD,QAAQpB,UAAYsB,OAAOC,OAC9B,CAAE,EACF1B,EAAeG,UACE,QAAjBwB,EAAAJ,EAAQpB,iBAAS,IAAAwB,EAAAA,EAAI,CAAA,GAEnBH,KAAKD,QAAQK,UACfJ,KAAKD,QAAQK,QAAUH,OAAOC,OAC5B,CAAE,EACFpB,GACyB,IAAzBkB,KAAKD,QAAQK,QAAmB,CAAA,EAAKJ,KAAKD,QAAQK,UAGtDJ,KAAKN,OAAOW,MAAMC,gBAAkB,SACpCN,KAAKO,OACN,CAMO,gBAAAC,CAAiBC,GACvBT,KAAKN,OAAOgB,QAAQ,CAAC,CAAEC,UAAWF,IAAgB,CAChD5B,SAAUmB,KAAKD,QAAQpB,UAAUE,SACjC+B,KAAM,WACNC,OAAQb,KAAKD,QAAQpB,UAAUC,MAGlC,CAMO,eAAAkC,GACN,OAAOC,KAAKC,IAAIC,OAAOC,WAAYD,OAAOE,aAAe,CAC1D,CAOO,qBAAAC,CAAsBC,GAC5B,MAAMC,EAAQ,CAAEjC,EAAG,EAAGC,EAAG,GAQzB,OAPkB,IAAd+B,EACFC,EAAMjC,EAAIiC,EAAMhC,GAAK,EACE,MAAd+B,EACTC,EAAMjC,GAAK,EACY,MAAdgC,IACTC,EAAMhC,GAAK,GAENgC,CACR,CAOO,YAAAC,CAAaC,EAAgBC,GACnC,MAAMC,EAASzC,SAAS0C,cAAc,OActC,OAbAD,EAAOE,aACL,QACA,mFAGkB,EAATJ,sDAEMC,6CAGZI,QAAQ,OAAQ,IAChBA,QAAQ,OAAQ,MAEdH,CACR,CAMD,KAAAI,CAAML,EAAgB,aACpBzB,KAAKN,OAAOqC,cAAc1B,MAAM2B,SAAW,WAE3C,MAAMC,EAAUC,IACdlC,KAAKN,OAAOyC,WAAWC,aAAaF,EAASlC,KAAKN,OAAO,EAS3D,GAFAuC,EAJ4BjC,KAAKuB,aAC/BvB,KAAKD,QAAQtB,cACbgD,IAImC,SAAjCzB,KAAKD,QAAQrB,gBAA4B,CAK3CuD,EAJ8BjC,KAAKuB,aACjCvB,KAAKD,QAAQrB,gBACb+C,GAGH,CACF,CAMO,iBAAAY,GACN,MACMC,EADiBrB,OAAOsB,iBAAiBvC,KAAKN,QACdiB,UACtC,IAAI6B,EAAe,EACfC,EAAe,EACfC,EAAS,EACTC,EAAS,EAEb,GAAIL,GAAqC,SAAnBA,EAA2B,CAC/C,MAAMM,EAAc,+BACdC,EAAQP,EAAeO,MAAMD,GAEnC,GAAIC,EAAO,CACT,MAAMC,EAAeD,EAAM,GAAGE,MAAM,KAAKC,IAAIC,YAE5B,WAAbJ,EAAM,IAERH,EAASI,EAAa,GACtBH,EAASG,EAAa,GACtBN,EAAeM,EAAa,GAC5BL,EAAeK,EAAa,IACN,aAAbD,EAAM,KAEfH,EAASI,EAAa,GACtBH,EAASG,EAAa,GACtBN,EAAeM,EAAa,IAC5BL,EAAeK,EAAa,IAI/B,CACF,CAED,MAAO,CAAEN,eAAcC,eAAcC,SAAQC,SAC9C,CAOD,MAAA/C,CAAOP,EAAWC,aAEhB,MAAM4D,EAAOlD,KAAKN,OAAOyD,wBACnBC,EAAQpD,KAAKqC,oBACbgB,EAAQH,EAAKG,MAAQD,EAAMV,OAC3BY,EAASJ,EAAKI,OAASF,EAAMT,OAC7BY,EAAgBL,EAAKM,KAAOJ,EAAMZ,aAAea,EAAQ,EACzDI,EAAgBP,EAAKQ,IAAMN,EAAMX,aAAea,EAAS,GAExDK,EAAIC,GAAM,CAACvE,EAAIkE,EAAejE,EAAImE,GACnCI,EAAc9C,KAAK+C,KAAKH,EAAKA,EAAKC,EAAKA,GAE7C,GACmC,SAAjC5D,KAAKD,QAAQrB,iBACbmF,GAAe7D,KAAKD,QAAQrB,gBAC5B,CACA,MAAMqF,EAA4B,GAE5BC,EAAOjD,KAAK+C,KAAKH,EAAKA,EAAKC,EAAKA,GAChCK,EAAc,IAATD,EAAa,EAAIL,EAAKK,EAC3BE,EAAc,IAATF,EAAa,EAAIJ,EAAKI,EAK3BG,EAAcH,GAHe,SAAjChE,KAAKD,QAAQrB,gBACTsB,KAAKc,kBACLd,KAAKD,QAAQrB,iBAEb0F,EAAiBpE,KAAKD,QAAQtB,cAAgB0F,EAGpD,GAAInE,KAAKD,QAAQK,QAAS,CACxB,MAAMiE,EAAYrE,KAAKD,QAAQK,QACzBkB,EAAQtB,KAAKoB,sBAAsBiD,EAAUC,UAC7CC,EAAgBF,EAAUtF,SAAWoF,EAC3CJ,EAAgBS,KAAK,eAAeH,EAAUrF,kBACzCqF,EAAUI,KAAyB,MAAlBJ,EAAUI,KAC9BV,EAAgBS,KAAK,WAAWN,EAAKK,EAAgBjD,EAAMjC,SACxDgF,EAAUI,KAAyB,MAAlBJ,EAAUI,KAC9BV,EAAgBS,KAAK,YAAYP,EAAKM,EAAgBjD,EAAMhC,QAC/D,CAGD,GAAsB,QAAlBa,EAAAH,KAAKD,QAAQ2E,aAAK,IAAAvE,OAAA,EAAAA,EAAEwE,GAAI,CAC1B,MAAMC,EAAe5E,KAAKD,QAAQ2E,MAC5BG,EAA6B,QAAjBC,EAAAF,EAAaG,YAAI,IAAAD,EAAAA,EAAI,EACvC,IAAIE,EAAaJ,EAAaD,GAAKE,EAC/BD,EAAaK,WAAUD,GAAcb,GACzCJ,EAAgBS,KAAK,SAASK,EAAYG,KAC3C,CAGD,MAAM1D,EAAQtB,KAAKoB,sBAAsBpB,KAAKD,QAAQuE,WAC/CY,EAAQC,GAAU,CACvBlB,EAAKG,EAAiB9C,EAAMjC,EAC5B6E,EAAKE,EAAiB9C,EAAMhC,GAEzBU,KAAKD,QAAQ0E,KAA4B,MAArBzE,KAAKD,QAAQ0E,KACpCV,EAAgBS,KAAK,cAAcU,QAEhClF,KAAKD,QAAQ0E,KAA4B,MAArBzE,KAAKD,QAAQ0E,KACpCV,EAAgBS,KAAK,cAAcW,QAErCnF,KAAKQ,iBAAiBuD,EAAgBqB,KAAK,KAC5C,gBACKpF,KAAKD,QAAQ2E,4BAAOK,MACtB/E,KAAKQ,iBAAiB,SAASR,KAAKD,QAAQ2E,MAAMK,SAC/C/E,KAAKQ,iBAAiB,OAE9B,CAKD,KAAAD,SACEP,KAAKN,OAAOW,MAAMgF,WAAa,YAC3BrF,KAAKD,QAAQK,UAASJ,KAAKN,OAAOW,MAAMiF,eAAiB,0BACzDtF,KAAKD,QAAQ2E,4BAAOK,QACtB/E,KAAKN,OAAOW,MAAMM,UAAY,SAASX,KAAKD,QAAQ2E,MAAMK,SAC5DxG,EAAUiG,KAAKxE,KAChB,CAKD,IAAAH,GACE,MAAM0F,EAAQhH,EAAUiH,WACrB/F,GAAaA,EAASC,SAAWM,KAAKN,UAE1B,IAAX6F,GAAchH,EAAUkH,OAAOF,EAAO,EAC3C,CAKD,KAAAG,GACE1F,KAAKN,OAAOW,MAAMM,UAAY,MAC/B"}